#include <iostream>
#include <vector>

struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};

void swapKthNodes(ListNode* head, int N, int K) {
    if (!head || K > N) return;
    
    // Find Kth node from start
    ListNode* first = head;
    for (int i = 1; i < K; ++i) {
        first = first->next;
    }
    
    // Find Kth node from end: (N-K+1)th node from start
    ListNode* second = head;
    for (int i = 1; i < N - K + 1; ++i) {
        second = second->next;
    }
    
    // Swap values
    int temp = first->val;
    first->val = second->val;
    second->val = temp;
}

int main() {
    int N;
    std::cin >> N;
    std::vector<int> values(N);
    for (int i = 0; i < N; ++i) {
        std::cin >> values[i];
    }
    
    int K;
    std::cin >> K;
    
    // Create linked list
    ListNode* head = new ListNode(values[0]);
    ListNode* current = head;
    for (int i = 1; i < N; ++i) {
        current->next = new ListNode(values[i]);
        current = current->next;
    }
    
    swapKthNodes(head, N, K);
    
    // Print linked list
    current = head;
    while (current) {
        std::cout << current->val << " ";
        current = current->next;
    }
    std::cout << std::endl;
    
    // Free memory
    current = head;
    while (current) {
        ListNode* next = current->next;
        delete current;
        current = next;
    }
    
    return 0;
}
