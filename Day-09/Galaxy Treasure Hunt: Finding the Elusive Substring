===========================
  CPP code 
===========================

#include <iostream>
#include <string>
#include <unordered_map>
#include <climits>
using namespace std;

int shortest_substring(const string& s, const string& t) {
    if (t.size() > s.size()) return -1;

    unordered_map<char, int> need, window;
    for (char c : t) need[c]++;

    int have = 0, required = need.size();
    int left = 0, minLen = INT_MAX;

    for (int right = 0; right < (int)s.size(); right++) {
        char c = s[right];
        window[c]++;

        // Check if this character fulfills a requirement
        if (need.count(c) && window[c] == need[c]) {
            have++;
        }

        // Try to shrink window when all chars are satisfied
        while (have == required) {
            minLen = min(minLen, right - left + 1);

            char leftChar = s[left];
            window[leftChar]--;
            if (need.count(leftChar) && window[leftChar] < need[leftChar]) {
                have--;
            }
            left++;
        }
    }

    return (minLen == INT_MAX) ? -1 : minLen;
}

int main() {
    string s, t;
    cin >> s >> t;
    int result = shortest_substring(s, t);
    cout << result << endl;
    return 0;
}
