#include <iostream>
#include <vector>
using namespace std;

bool can_partition(vector<int>& arr) {
    int n = arr.size();
    int total_sum = 0;
    for (int num : arr) total_sum += num;

    // If total is odd, cannot partition
    if (total_sum % 2 != 0) return false;

    int target = total_sum / 2;
    vector<vector<bool>> dp(n + 1, vector<bool>(target + 1, false));

    // Base case: sum 0 is always possible
    for (int i = 0; i <= n; i++) dp[i][0] = true;

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= target; j++) {
            if (arr[i - 1] <= j) {
                dp[i][j] = dp[i - 1][j] || dp[i - 1][j - arr[i - 1]];
            } else {
                dp[i][j] = dp[i - 1][j];
            }
        }
    }

    // Ensure not all elements are taken (at least one in each group)
    if (!dp[n][target]) return false;

    // Extra check: ensure subset is not whole array
    if (target == total_sum) return false;

    return true;
}

int main() {
    int N;
    cin >> N;
    vector<int> arr(N);
    for (int i = 0; i < N; ++i) {
        cin >> arr[i];
    }

    int total_sum = 0;
    for (int i = 0; i < N; ++i) total_sum += arr[i];

    if (can_partition(arr)) {
        cout << total_sum / 2 << endl;
    } else {
        cout << 0 << endl;
    }

    return 0;
}
