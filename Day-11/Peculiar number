===========================
	CPP CODE 
===========================
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// Step 3: Compute Fibonacci (0th = 0, 1st = 1)
long long fibonacci(int n) {
    if (n == 0) return 0;
    if (n == 1) return 1;
    long long a = 0, b = 1, c;
    for (int i = 2; i <= n; i++) {
        c = a + b;
        a = b;
        b = c;
    }
    return b;
}

// Helper for Step 2: Can we partition with max sum <= mid?
bool canPartition(const vector<int>& arr, int k, long long mid) {
    long long currentSum = 0;
    int partitions = 1; // start with first partition
    for (int num : arr) {
        if (currentSum + num > mid) {
            partitions++;
            currentSum = num;
            if (partitions > k) return false;
        } else {
            currentSum += num;
        }
    }
    return true;
}

int peculiarNumber(int n, int k, vector<int>& arr) {
    // Step 1: Replace arr[i] = abs(arr[i] - i)
    for (int i = 0; i < n; i++) {
        arr[i] = abs(arr[i] - i);
    }

    // Step 2: Binary search for min possible max partition sum
    long long low = *max_element(arr.begin(), arr.end());
    long long high = 0;
    for (int x : arr) high += x;

    long long ans = high;
    while (low <= high) {
        long long mid = (low + high) / 2;
        if (canPartition(arr, k, mid)) {
            ans = mid;
            high = mid - 1;
        } else {
            low = mid + 1;
        }
    }

    // Step 3: Fibonacci if ans < 100
    if (ans < 100) {
        return fibonacci((int)ans);
    }
    return (int)ans;
}

int main() {
    int n, k;
    cin >> n >> k;

    vector<int> arr(n);
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    cout << peculiarNumber(n, k, arr) << endl;
    return 0;
}
