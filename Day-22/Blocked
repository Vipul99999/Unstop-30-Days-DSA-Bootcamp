#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int bfs(int start, int n, vector<vector<int>>& adj, int skip_u = -1, int skip_v = -1) {
    vector<int> dist(n + 1, -1);
    queue<int> q;
    dist[start] = 0;
    q.push(start);

    while(!q.empty()) {
        int u = q.front(); q.pop();
        for(int v : adj[u]) {
            // Skip the edge if specified
            if ((u == skip_u && v == skip_v) || (u == skip_v && v == skip_u)) continue;
            if(dist[v] == -1) {
                dist[v] = dist[u] + 1;
                q.push(v);
            }
        }
    }
    return dist[n]; // distance to vertex N, -1 if unreachable
}

vector<int> bfs_all(int start, int n, vector<vector<int>>& adj) {
    vector<int> dist(n + 1, -1);
    queue<int> q;
    dist[start] = 0;
    q.push(start);

    while(!q.empty()) {
        int u = q.front(); q.pop();
        for(int v : adj[u]) {
            if(dist[v] == -1) {
                dist[v] = dist[u] + 1;
                q.push(v);
            }
        }
    }
    return dist;
}

void user_logic(int n, int m, vector<pair<int, int>> &edges) {
    vector<vector<int>> adj(n + 1);
    for(auto &e : edges) {
        adj[e.first].push_back(e.second);
        adj[e.second].push_back(e.first);
    }

    // BFS from 1 and N
    vector<int> dist_from_start = bfs_all(1, n, adj);
    vector<int> dist_from_end = bfs_all(n, n, adj);
    int L = dist_from_start[n];

    for(auto &e : edges) {
        int u = e.first, v = e.second;
        // Check if edge is on any shortest path
        bool on_path = false;
        if (dist_from_start[u] != -1 && dist_from_end[v] != -1 && dist_from_start[u] + 1 + dist_from_end[v] == L)
            on_path = true;
        if (dist_from_start[v] != -1 && dist_from_end[u] != -1 && dist_from_start[v] + 1 + dist_from_end[u] == L)
            on_path = true;

        if(!on_path) {
            cout << L << endl; // edge not critical
        } else {
            int new_dist = bfs(1, n, adj, u, v);
            cout << new_dist << endl;
        }
    }
}

int main() {
    int n, m;
    cin >> n >> m;
    vector<pair<int, int>> edges(m);
    for (int i = 0; i < m; i++) {
        cin >> edges[i].first >> edges[i].second;
    }

    user_logic(n, m, edges);
    return 0;
}
