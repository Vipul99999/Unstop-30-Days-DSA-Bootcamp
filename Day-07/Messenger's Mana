//CPP
#include <bits/stdc++.h>
using namespace std;

int min_mana(vector<vector<char>>& grid) {
    int m = grid.size(), n = grid[0].size();
    vector<vector<int>> dist(m, vector<int>(n, INT_MAX));
    
    // Directions: right (a), left (b), down (c), up (d)
    vector<pair<int,int>> dirs = {{0,1}, {0,-1}, {1,0}, {-1,0}};
    vector<char> runes = {'a','b','c','d'};
    
    deque<pair<int,int>> dq;
    dq.push_back({0,0});
    dist[0][0] = 0;
    
    while (!dq.empty()) {
        auto [x,y] = dq.front(); dq.pop_front();
        
        for (int k = 0; k < 4; k++) {
            int nx = x + dirs[k].first;
            int ny = y + dirs[k].second;
            if (nx < 0 || ny < 0 || nx >= m || ny >= n) continue;
            
            int cost = (grid[x][y] == runes[k]) ? 0 : 1;
            
            if (dist[x][y] + cost < dist[nx][ny]) {
                dist[nx][ny] = dist[x][y] + cost;
                if (cost == 0) dq.push_front({nx, ny});
                else dq.push_back({nx, ny});
            }
        }
    }
    
    return dist[m-1][n-1];
}

int main() {
    int m, n;
    cin >> m >> n;
    
    vector<vector<char>> grid(m, vector<char>(n));
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            cin >> grid[i][j];
        }
    }
    
    cout << min_mana(grid) << endl;
    return 0;
}
