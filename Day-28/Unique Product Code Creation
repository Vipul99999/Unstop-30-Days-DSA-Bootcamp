#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <climits>

using namespace std;

// Function to compute ASCII difference between two codes
int ascii_diff(const string &a, const string &b) {
    int diff = 0;
    for (size_t i = 0; i < a.size(); i++) {
        diff += abs(a[i] - b[i]);
    }
    return diff;
}

// Recursive function to generate all codes
void generate_codes(int N, vector<char> &chars, string current, vector<string> &codes) {
    if (current.size() == N) {
        codes.push_back(current);
        return;
    }
    for (char c : chars) {
        generate_codes(N, chars, current + c, codes);
    }
}

void user_logic(int N, vector<char>& chars, int& total_codes, vector<string>& codes, pair<string, string>& min_diff_pair) {
    // Generate all codes
    generate_codes(N, chars, "", codes);

    // Sort in lexicographically descending order
    sort(codes.begin(), codes.end(), greater<string>());

    // Total number of codes
    total_codes = codes.size();

    // Find the pair with smallest ASCII difference
    int min_diff = INT_MAX;
    for (size_t i = 0; i < codes.size(); i++) {
        for (size_t j = i + 1; j < codes.size(); j++) {
            int diff = ascii_diff(codes[i], codes[j]);
            if (diff < min_diff) {
                min_diff = diff;
                min_diff_pair = {codes[i], codes[j]};
            }
        }
    }
}

int main() {
    int N;
    vector<char> chars(3);

    cin >> N;
    for (int i = 0; i < 3; i++) {
        cin >> chars[i];
    }

    int total_codes;
    vector<string> codes;
    pair<string, string> min_diff_pair;

    user_logic(N, chars, total_codes, codes, min_diff_pair);

    // Print the total number of unique product codes
    cout << total_codes << endl;

    // Print all product codes in lexicographically descending order
    for (const auto& code : codes) {
        cout << code << " ";
    }
    cout << endl;

    // Print the two product codes with the smallest ASCII difference
    cout << min_diff_pair.first << " " << min_diff_pair.second << endl;

    return 0;
}
