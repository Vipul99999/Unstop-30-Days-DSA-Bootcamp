//CPP 
#include <iostream>
#include <unordered_map>
#include <vector>
#include <limits> 

void validate_password(const std::vector<int>& password, std::string& result, int& most_frequent_element) {
    std::unordered_map<int, int> freq;
    for (int num : password) {
        freq[num]++;
    }

    bool all_even = true;
    bool has_exactly_two = false;

    int max_freq = 0;
    most_frequent_element = std::numeric_limits<int>::max(); 

    for (const auto& [num, count] : freq) {
        if (count % 2 != 0) {
            all_even = false;
        }
        if (count == 2) {
            has_exactly_two = true;
        }

        if (count > max_freq || (count == max_freq && num < most_frequent_element)) {
            max_freq = count;
            most_frequent_element = num;
        }
    }

    result = (all_even && has_exactly_two) ? "VALID" : "INVALID";
}

int main() {
    int N;
    std::cin >> N;
    std::vector<int> password(N);
    for (int i = 0; i < N; ++i) {
        std::cin >> password[i];
    }

    std::string validation_result;
    int most_frequent_element;
    validate_password(password, validation_result, most_frequent_element);

    std::cout << validation_result << '\n';
    std::cout << most_frequent_element << '\n';

    return 0;
}
