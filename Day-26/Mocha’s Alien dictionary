#include <iostream>
#include <vector>
#include <string>
#include <unordered_set>

bool word_break(const std::string &s, const std::vector<std::string> &word_dict) {
    int n = s.size();
    std::unordered_set<std::string> dict(word_dict.begin(), word_dict.end());

    std::vector<bool> dp(n + 1, false);
    dp[0] = true; // empty string can always be segmented

    for (int i = 1; i <= n; ++i) {
        for (int j = 0; j < i; ++j) {
            if (dp[j] && dict.count(s.substr(j, i - j))) {
                dp[i] = true;
                break;
            }
        }
    }
    return dp[n];
}

int main() {
    std::string s;
    std::cin >> s;
    int n;
    std::cin >> n;
    std::vector<std::string> word_dict(n);
    for (int i = 0; i < n; ++i) {
        std::cin >> word_dict[i];
    }
    bool result = word_break(s, word_dict);
    std::cout << (result ? "true" : "false") << std::endl;
    return 0;
}
