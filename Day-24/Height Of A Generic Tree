#include <bits/stdc++.h>
using namespace std;

struct Node {
    int val;
    vector<Node*> children;

    Node() : val(0) {}
    Node(int _val) : val(_val) {}

    // serialize function
    static string serialize(Node* root) {
        if (!root) return "[]";
        string res = "[" + to_string(root->val) + ",null,";
        queue<Node*> q;
        q.push(root);

        while (!q.empty()) {
            int count = q.size();
            while (count--) {
                Node* curr = q.front();
                q.pop();
                for (Node* child : curr->children) {
                    q.push(child);
                    res += to_string(child->val) + ",";
                }
                res += "null,";
            }
        }
        res.back() = ']'; // replace last comma with closing bracket
        return res;
    }

    // deserialize function
    static Node* deserialize(string input) {
        if (input == "[]") return nullptr;

        input = input.substr(1, input.size() - 2); // remove []
        vector<string> nodes;
        string token;
        stringstream ss(input);
        while (getline(ss, token, ',')) {
            nodes.push_back(token);
        }

        Node* root = new Node(stoi(nodes[0]));
        queue<Node*> q;
        q.push(root);

        int index = 2;
        while (!q.empty()) {
            Node* par = q.front();
            q.pop();
            while (index < (int)nodes.size()) {
                string str = nodes[index++];
                if (str == "null") break;
                Node* child = new Node(stoi(str));
                par->children.push_back(child);
                q.push(child);
            }
        }
        return root;
    }
};

struct Solution {
    int maxDepth(Node* root) {
        if (!root) return 0;
        if (root->children.empty()) return 1;

        int best = 0;
        for (Node* child : root->children) {
            best = max(best, maxDepth(child));
        }
        return best + 1;
    }
};

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    string line;
    Solution ob;
    while (getline(cin, line)) {
        Node* root = Node::deserialize(line);
        cout << ob.maxDepth(root) << "\n";
    }

    return 0;
}
