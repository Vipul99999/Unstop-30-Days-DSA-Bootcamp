#include <iostream>
#include <vector>
#include <queue>
#include <sstream>
#include <string>
using namespace std;

class Node {
public:
    int val;
    vector<Node*> children;

    Node(int _val) { val = _val; }
};

// Deserialize function (already provided)
Node* deserialize(const string& data) {
    if (data == "[]") return nullptr;

    string content = data.substr(1, data.size() - 2);
    stringstream ss(content);
    string token;
    getline(ss, token, ',');

    Node* root = new Node(stoi(token));
    queue<Node*> q;
    q.push(root);

    while (!q.empty()) {
        Node* parent = q.front();
        q.pop();

        while (getline(ss, token, ',')) {
            if (token == "null") {
                break;
            }
            Node* child = new Node(stoi(token));
            parent->children.push_back(child);
            q.push(child);
        }
    }

    return root;
}

// Function to compute height of generic tree
int user_logic(Node* root) {
    if (!root) return 0;

    queue<Node*> q;
    q.push(root);
    int height = 0;

    while (!q.empty()) {
        int sz = q.size();
        height++; // increment height for each level
        for (int i = 0; i < sz; i++) {
            Node* node = q.front();
            q.pop();
            for (Node* child : node->children) {
                q.push(child);
            }
        }
    }

    return height;
}

int main() {
    string line;
    getline(cin, line);

    Node* root = deserialize(line);
    int result = user_logic(root);
    cout << result << endl;

    return 0;
}
