#include <iostream>
#include <vector>
using namespace std;

vector<vector<int>> adj;
long long total_depth = 0;

// DFS to compute depth sum
void dfs(int node, int parent, int depth) {
    total_depth += depth;
    for (int child : adj[node]) {
        if (child != parent) {
            dfs(child, node, depth + 1);
        }
    }
}

long long sum_of_depths(int n, const vector<pair<int, int>>& edges) {
    adj.assign(n + 1, vector<int>());
    for (auto &edge : edges) {
        int u = edge.first;
        int v = edge.second;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    total_depth = 0;
    dfs(1, 0, 0); // root is 1, parent 0, depth 0
    return total_depth;
}

int main() {
    int n;
    cin >> n;
    vector<pair<int, int>> edges(n-1);
    for (int i = 0; i < n-1; ++i) {
        cin >> edges[i].first >> edges[i].second;
    }
    cout << sum_of_depths(n, edges) << endl;
    return 0;
}
