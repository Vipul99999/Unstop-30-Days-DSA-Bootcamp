#include <bits/stdc++.h>
using namespace std;

int min_treasure(vector<vector<int>>& grid) {
    int n = grid.size();
    vector<int> dp = grid[0];  // start with first row

    for (int i = 1; i < n; i++) {
        // find min1, min2 in previous row
        int min1 = INT_MAX, min2 = INT_MAX, idx1 = -1;
        for (int j = 0; j < n; j++) {
            if (dp[j] < min1) {
                min2 = min1;
                min1 = dp[j];
                idx1 = j;
            } else if (dp[j] < min2) {
                min2 = dp[j];
            }
        }

        vector<int> new_dp(n);
        for (int j = 0; j < n; j++) {
            if (j == idx1) {
                new_dp[j] = grid[i][j] + min2;
            } else {
                new_dp[j] = grid[i][j] + min1;
            }
        }
        dp.swap(new_dp);
    }

    return *min_element(dp.begin(), dp.end());
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n;
    cin >> n;
    vector<vector<int>> grid(n, vector<int>(n));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> grid[i][j];
        }
    }
    int result = min_treasure(grid);
    cout << result << "\n";
    return 0;
}
