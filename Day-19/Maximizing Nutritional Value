#include <bits/stdc++.h>
using namespace std;

int maximizeNutritionalValue(int n, int m, int k, vector<int> &price, vector<int> &nutrition) {
    // dp[i][j][c] = max nutrition using first i fruits, budget j, and c coupons used
    vector<vector<vector<int>>> dp(n+1, vector<vector<int>>(m+1, vector<int>(k+1, 0)));

    for (int i = 1; i <= n; i++) {
        int cost = price[i-1];
        int nut = nutrition[i-1];
        int halfCost = cost / 2;

        for (int money = 0; money <= m; money++) {
            for (int used = 0; used <= k; used++) {
                // Case 1: skip fruit
                dp[i][money][used] = max(dp[i][money][used], dp[i-1][money][used]);

                // Case 2: buy without coupon
                if (money >= cost) {
                    dp[i][money][used] = max(dp[i][money][used],
                        dp[i-1][money-cost][used] + nut);
                }

                // Case 3: buy with coupon
                if (used > 0 && money >= halfCost) {
                    dp[i][money][used] = max(dp[i][money][used],
                        dp[i-1][money-halfCost][used-1] + nut);
                }
            }
        }
    }

    // answer = maximum nutrition for any coupon usage â‰¤ k
    int ans = 0;
    for (int money = 0; money <= m; money++) {
        for (int used = 0; used <= k; used++) {
            ans = max(ans, dp[n][money][used]);
        }
    }
    return ans;
}


int main() {
    int n, m, k;
    cin >> n >> m >> k;
    vector<int> price(n), nutrition(n);
    for (int i = 0; i < n; i++) {
        cin >> price[i];
    }
    for (int i = 0; i < n; i++) {
        cin >> nutrition[i];
    }

    int result = maximizeNutritionalValue(n, m, k, price, nutrition);
    cout << result << endl;

    return 0;
}
