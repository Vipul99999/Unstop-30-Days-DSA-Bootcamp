#include <iostream>
#include <vector>
#include <unordered_map>
using namespace std;

// Memoization key: index + sum offset
string make_key(int idx, int sum) {
    return to_string(idx) + "," + to_string(sum);
}

int dfs(int idx, int current_sum, const vector<int>& nums, int target, unordered_map<string,int>& memo) {
    if (idx == nums.size()) {
        return current_sum == target ? 1 : 0;
    }
    
    string key = make_key(idx, current_sum);
    if (memo.count(key)) return memo[key];
    
    int add = dfs(idx + 1, current_sum + nums[idx], nums, target, memo);
    int sub = dfs(idx + 1, current_sum - nums[idx], nums, target, memo);
    
    return memo[key] = add + sub;
}

int user_logic(const vector<int>& nums, int target) {
    unordered_map<string,int> memo;
    return dfs(0, 0, nums, target, memo);
}

int main() {
    int n, target;
    cin >> n;
    vector<int> nums(n);
    for (int i = 0; i < n; ++i) cin >> nums[i];
    cin >> target;
    
    int ways = user_logic(nums, target);
    cout << ways << endl;
    return 0;
}
