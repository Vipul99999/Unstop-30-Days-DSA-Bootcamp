#include <iostream>
#include <vector>
#include <string>
#include <queue>
using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

// Helper to build balanced BST from sorted array
TreeNode* buildBST(vector<int>& nums, int l, int r) {
    if (l > r) return nullptr;
    int mid = (l + r) / 2; // left middle if even size
    TreeNode* root = new TreeNode(nums[mid]);
    root->left = buildBST(nums, l, mid - 1);
    root->right = buildBST(nums, mid + 1, r);
    return root;
}

TreeNode* sortedArrayToBST(vector<int>& nums) {
    return buildBST(nums, 0, nums.size() - 1);
}

// Convert tree to level order string
string treeNodeToString(TreeNode* root) {
    if (!root) return "";
    queue<TreeNode*> q;
    q.push(root);
    string result = "";
    bool first = true;

    while (!q.empty()) {
        TreeNode* node = q.front(); q.pop();
        if (!first) result += " ";
        result += to_string(node->val);
        first = false;

        if (node->left) q.push(node->left);
        if (node->right) q.push(node->right);
    }
    return result;
}

int main() {
    int n;
    cin >> n;
    vector<int> arr(n);
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }
    TreeNode* root = sortedArrayToBST(arr);
    string result = treeNodeToString(root);
    cout << result << endl;
    return 0;
}
