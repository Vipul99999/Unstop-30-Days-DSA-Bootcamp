#include <iostream>
#include <vector>
using namespace std;

int n, m;
vector<vector<char>> grid;
vector<vector<bool>> visited;

int dx[4] = {1, -1, 0, 0};
int dy[4] = {0, 0, 1, -1};

int dfs(int x, int y) {
    if (grid[x][y] == 'm') return 1;  // reached man
    
    visited[x][y] = true;
    int ways = 0;

    for (int k = 0; k < 4; k++) {
        int nx = x + dx[k], ny = y + dy[k];
        if (nx >= 0 && nx < n && ny >= 0 && ny < m &&
            !visited[nx][ny] &&
            (grid[nx][ny] == 'p' || grid[nx][ny] == 'm')) {
            ways += dfs(nx, ny);
        }
    }

    visited[x][y] = false; // backtrack
    return ways;
}

int snake_to_man_path(vector<vector<char>> &matrix, int N, int M) {
    n = N;
    m = M;
    grid = matrix;
    visited.assign(n, vector<bool>(m, false));

    int sx = -1, sy = -1, mx = -1, my = -1;

    // find snake and man
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (grid[i][j] == 's') { sx = i; sy = j; }
            if (grid[i][j] == 'm') { mx = i; my = j; }
        }
    }

    if (sx == -1 || mx == -1) return 0; // missing

    return dfs(sx, sy);
}

int main() {
    int N, M;
    cin >> N >> M;
    vector<vector<char>> matrix(N, vector<char>(M));
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            cin >> matrix[i][j];
        }
    }

    cout << snake_to_man_path(matrix, N, M) << endl;
    return 0;
}
